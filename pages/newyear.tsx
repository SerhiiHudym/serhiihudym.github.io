import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";
import { NEW_YEAR_SONGS } from "../utils/constants";
import styles from "../styles/newyear.module.scss";

const NewYearPage: NextPage = () => {
  const [daysLeft, setDaysLeft] = useState(365);
  const [hoursLeft, setHoursLeft] = useState(0);
  const [minutesLeft, setMinutesLeft] = useState(0);
  const [secondsLeft, setSecondsLeft] = useState(0);

  const [song, setSong] = useState(NEW_YEAR_SONGS[0]);
  const [playing, setPlaying] = useState(false);

  let audio = useRef<HTMLAudioElement>(null);

  useEffect(() => {
    audio.current?.addEventListener("ended", next);

    setNewYearData();

    return () => {
      audio.current?.removeEventListener("ended", next);
    };
  });

  const play = () => {
    audio?.current?.load();
    audio?.current?.play();

    // let audio = document.getElementById("audio");
    // audio?.play();

    setPlaying(true);
  };

  const pause = () => {
    audio?.current?.pause();
    setPlaying(false);
  };

  const next = () => {
    let currentIndex = NEW_YEAR_SONGS.indexOf(song);

    setSong(
      currentIndex === NEW_YEAR_SONGS.length - 1
        ? NEW_YEAR_SONGS[0]
        : NEW_YEAR_SONGS[currentIndex + 1]
    );

    play();
  };

  const prev = () => {
    let currentIndex = NEW_YEAR_SONGS.indexOf(song);

    setSong(
      currentIndex === 0
        ? NEW_YEAR_SONGS[NEW_YEAR_SONGS.length - 1]
        : NEW_YEAR_SONGS[currentIndex - 1]
    );

    play();
  };

  const setNamedSong = (name: string) => {
    setSong(name);
    play();
  };

  const setNewYearData = () => {
    let now = new Date().getTime();
    let nextYear = new Date(
      `Jan 1, ${new Date().getFullYear() + 1} 00:00:00`
    ).getTime();
    let gap = nextYear - now;

    const second = 1000;
    const minute = second * 60;
    const hour = minute * 60;
    const day = hour * 24;

    const d = Math.floor(gap / day),
      h = Math.floor((gap % day) / hour),
      m = Math.floor((gap % hour) / minute),
      s = Math.floor((gap % minute) / second);

    setDaysLeft(d);
    setHoursLeft(h);
    setMinutesLeft(m);
    setSecondsLeft(s);

    setTimeout(setNewYearData, 1000);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Happy New Year</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.poster}>
        <img src={`/newyear/images/posters/${song}.jpg`} />
      </div>

      <div id="counter" className={styles.counter}>
        <h2>Countdown to New Year {new Date().getFullYear()}</h2>
        {daysLeft > 0 && <div>{daysLeft} days</div>}
        {daysLeft === 0 && (
          <div>
            {hoursLeft}:{minutesLeft}:{secondsLeft}
          </div>
        )}
      </div>

      <main>
        <div className={styles.content}>
          {song}
          <div id="controls" className={styles.controls}>
            <div onClick={prev} className={styles.sideControls}>
              <img src="/newyear/images/controls/prev.png" alt="Prev" />
            </div>
            {!playing && (
              <div onClick={play} className={styles.mainControls}>
                <img src="/newyear/images/controls/play.png" alt="Play" />
              </div>
            )}
            {playing && (
              <div onClick={pause} className={styles.mainControls}>
                <img src="/newyear/images/controls/pause.png" alt="Pause" />
              </div>
            )}
            <div onClick={next} className={styles.sideControls}>
              <img src="/newyear/images/controls/next.png" alt="Next" />
            </div>
          </div>

          <audio
            ref={audio}
            id="audio"
            controls={true}
            // src={`/newyear/audio/${song}.mp3`}
            // autoPlay={true}
          >
            <source src={`/newyear/audio/${song}.mp3`}></source>
          </audio>

          <div className={styles.songsList}>
            {NEW_YEAR_SONGS.map((el, index) => (
              <div
                onClick={() => setNamedSong(el)}
                key={index}
                className={`${styles.songItem} ${
                  song === el ? styles.selectedSongItem : ""
                }`}
              >
                {index + 1}. {el}
              </div>
            ))}
          </div>
        </div>
      </main>
    </div>
  );
};

export default NewYearPage;
